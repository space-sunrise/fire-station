const highp float SCANLINES_OPACITY = 0.8;
const highp float SCANLINES_WIDTH = 0.8;
const highp float GRILLE_OPACITY = 0.3;
const highp vec2 RESOLUTION = vec2(640.0, 480.0);
const bool PIXELATE = true;
const bool ROLL = false;
const highp float ROLL_SPEED = 1.5;
const highp float ROLL_SIZE = 0.5;
const highp float ROLL_VARIATION = 3.0;
const highp float DISTORT_INTENSITY = 0.2;
const highp float NOISE_OPACITY = 0.4;
const highp float NOISE_SPEED = 5.0;
const highp float STATIC_NOISE_INTENSITY = 0.05;
const highp float ABERRATION = 0.02;
const highp float BRIGHTNESS = 0.4;
const bool DISCOLOR = true;
const highp float WARP_AMOUNT = 1.0;
const bool CLIP_WARP = true;
const highp float VIGNETTE_INTENSITY = 0.2;
const highp float VIGNETTE_OPACITY = 7.0;

// Новые параметры VHS эффектов
const highp float HORIZONTAL_JITTER = 0.0; // Горизонтальное дрожание
const highp float JITTER_SPEED = 0.0;      // Скорость дрожания
const highp float COLOR_DEGRADATION = 0.1;  // Деградация цвета
const highp float VERTICAL_JUMP = 0.0;     // Вертикальные скачки
const highp float VERTICAL_JUMP_PERIOD = 0.0; // Период вертикальных скачков
const highp float TAPE_WAVE_AMOUNT = 0.3;   // Волнистость ленты
const highp float TAPE_CREASE_AMOUNT = 0.0; // Эффект замятой ленты
const highp float TAPE_CREASE_PERIOD = 0.0; // Период замятостей ленты
const highp float HEAD_SWITCHING_NOISE = 0.0; // Шум переключения головок
const highp float BLEEDING = 0.3;          // Растекание цветов

uniform sampler2D SCREEN_TEXTURE;

const highp float PI = 3.14159265359;

// Функция генерации шума
highp float rand(highp vec2 co) {
    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

highp vec2 warp(highp vec2 uv) {
    highp vec2 delta = uv - 0.5;
    highp float delta2 = dot(delta, delta);
    highp float delta4 = delta2 * delta2;
    highp float delta_offset = delta4 * WARP_AMOUNT;

    // Добавляем волнистость ленты
    highp float wave = sin(uv.y * 20.0 + TIME * 2.0) * TAPE_WAVE_AMOUNT * 0.01;

    // Добавляем замятости ленты (случайно появляющиеся)
    highp float crease = sin(TIME * 0.5) > 0.96 ?
        sin(uv.y * 120.0 + TIME * 10.0) * TAPE_CREASE_AMOUNT * 0.04 : 0.0;

    return uv + delta * delta_offset + vec2(wave + crease, 0.0);
}

highp float vignette(highp vec2 uv) {
    uv *= 1.0 - uv.xy;
    highp float vignette = uv.x * uv.y * 15.0;
    return pow(vignette, VIGNETTE_INTENSITY * VIGNETTE_OPACITY);
}

// Функция для создания эффекта scanlines (строк развертки)
highp float scanlines(highp vec2 uv) {
    highp float lines = sin(uv.y * RESOLUTION.y * PI * SCANLINES_WIDTH);
    lines = abs(lines) * SCANLINES_OPACITY;
    return 1.0 - lines;
}

// Функция для создания эффекта grille (сетки пикселей)
highp float grille(highp vec2 uv) {
    highp float dots = sin(uv.x * RESOLUTION.x * PI * 0.7);
    dots = abs(dots) * GRILLE_OPACITY;
    return 1.0 - dots;
}

void fragment() {
    // Применяем горизонтальное дрожание
    highp float jitter = HORIZONTAL_JITTER * (rand(vec2(TIME * JITTER_SPEED, TIME * JITTER_SPEED)) - 0.5);

    // Применяем вертикальные скачки (тайминг VHS)
    highp float vjump = VERTICAL_JUMP * step(0.99, sin(TIME * VERTICAL_JUMP_PERIOD));

    // Применяем искажение от переключения головок внизу кадра
    highp float head_noise = HEAD_SWITCHING_NOISE * step(0.95, UV.y) * sin(TIME * 20.0 + UV.x * 50.0);

    // Искаженные координаты UV
    highp vec2 uv = warp(UV + vec2(jitter, vjump + head_noise));
    highp vec2 text_uv = PIXELATE ? ceil(uv * RESOLUTION) / RESOLUTION : uv;

    lowp vec4 text;

    // Применяем эффект rolling и хроматическую аберрацию
    if (ROLL) {
        highp vec2 roll_uv = vec2(0.0);
        highp float time = TIME;
        highp float roll_line = smoothstep(0.3, 0.9, sin(uv.y * ROLL_SIZE - (time * ROLL_SPEED)));
        roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * ROLL_SIZE * ROLL_VARIATION - (time * ROLL_SPEED * ROLL_VARIATION)));
        roll_uv = vec2((roll_line * DISTORT_INTENSITY * (1. - UV.x)), 0.0);

        // Увеличиваем разброс цветовых каналов для VHS эффекта
        text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(ABERRATION, 0.0) * 0.1).r;
        text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(ABERRATION, 0.0) * 0.1).g;
        text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
        text.a = 1.0;
    } else {
        text.r = texture(SCREEN_TEXTURE, text_uv + vec2(ABERRATION, 0.0) * 0.1).r;
        text.g = texture(SCREEN_TEXTURE, text_uv - vec2(ABERRATION, 0.0) * 0.1).g;
        text.b = texture(SCREEN_TEXTURE, text_uv).b;
        text.a = 1.0;
    }

    // Применяем растекание цветов (color bleeding)
    if (BLEEDING > 0.0) {
        highp vec4 bleed_left = texture(SCREEN_TEXTURE, text_uv - vec2(0.003, 0.0));
        text.r += bleed_left.r * BLEEDING * 0.3;
    }

    // Деградация цветов VHS
    if (DISCOLOR) {
        highp float colorShift = COLOR_DEGRADATION * sin(TIME * 0.2);
        text.r *= 1.0 + colorShift * 0.125;
        text.g *= 1.0 - colorShift * 0.08;
        text.b *= 1.0 + colorShift * 0.05;
    }

    // Добавляем статический шум
    highp float static_noise = rand(uv + vec2(TIME * NOISE_SPEED, 0.0)) * STATIC_NOISE_INTENSITY;
    text.rgb += vec3(static_noise) * NOISE_OPACITY;

    // Применяем scanlines и grille для CRT эффекта
    text.rgb *= scanlines(uv);
    text.rgb *= grille(uv);

    // Виньетка
    text.rgb *= vignette(uv);

    // Регулировка яркости
    text.rgb *= BRIGHTNESS * 2.5;

    COLOR = text;
}
