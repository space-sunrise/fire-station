using Content.Client.UserInterface.Controls;
using Content.Shared._Scp.Scp914;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._Scp.Scp914.Ui;

[GenerateTypedNameReferences]
public sealed partial class Scp914Window : FancyWindow
{
    public Action<Scp914CycleDirection>? OnNewModeSelected;
    public Action? OnStartCycle;

    private IGameTiming _gameTiming;

    private TimeSpan _nextTimeUse;
    private bool _active;

    public Scp914Window(IGameTiming gameTiming)
    {
        RobustXamlLoader.Load(this);

        _gameTiming = gameTiming;

        TurnLeftButton.OnPressed += _ => OnTurnLeftPressed();
        TurnRightButton.OnPressed += _ => OnTurnRightPressed();
        StartCycleBytton.OnPressed += _ => OnStartCyclePressed();
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        var disabled = _active || _gameTiming.CurTime < _nextTimeUse;

        TurnLeftButton.Disabled = disabled;
        TurnRightButton.Disabled = disabled;
        StartCycleBytton.Disabled = disabled;
    }

    public void UpdateState(Scp914BuiState newState)
    {
        CurrentModeLabel.Text = newState.NewMode.ToString();
        _active = newState.Active;
    }

    private void OnStartCyclePressed()
    {
        OnStartCycle?.Invoke();
        SetNextTimeUse();
    }

    private void OnTurnRightPressed()
    {
        OnNewModeSelected?.Invoke(Scp914CycleDirection.Right);
        SetNextTimeUse();
    }

    private void OnTurnLeftPressed()
    {
        OnNewModeSelected?.Invoke(Scp914CycleDirection.Left);
        SetNextTimeUse();
    }

    private void SetNextTimeUse()
    {
        _nextTimeUse = _gameTiming.CurTime + TimeSpan.FromSeconds(1);
    }
}
