using Content.Shared._Scp.ScpCCVars;
using Content.Shared._Scp.Shaders.Grain;
using Content.Shared._Scp.Watching.FOV;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared;
using Robust.Shared.Configuration;

namespace Content.Client._Scp.Options.UI.Tabs;

[GenerateTypedNameReferences]
public sealed partial class ScpTab : Control
{
    [Dependency] private readonly IConfigurationManager _configuration = default!;

    public ScpTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        CheckCompatibilityMode();

        /*
         * Графика
         */

        // Зернистость
        Control.AddOptionCheckBox(ScpCCVars.GrainToggleOverlay, GrainToggleOverlayCheckBox);
        Control.AddOptionSlider(ScpCCVars.GrainStrength, GrainStrengthSlider,
            GrainOverlayComponent.BaseStrengthLimit.Min, GrainOverlayComponent.BaseStrengthLimit.Max);

        // Поле зрения
        Control.AddOptionPercentSlider(ScpCCVars.FieldOfViewOpacity, FieldOfViewOpacitySlider,
            FieldOfViewComponent.MinOpacity, FieldOfViewComponent.MaxOpacity);
        Control.AddOptionPercentSlider(ScpCCVars.FieldOfViewBlurScale, FieldOfViewBlurScale,
            FieldOfViewComponent.MinBlurScale, FieldOfViewComponent.MaxBlurScale);

        // Эффект свечения
        Control.AddOptionCheckBox(ScpCCVars.LightBloomEnable, LightBloomEnable);
        Control.AddOptionCheckBox(ScpCCVars.LightBloomConeEnable, LightBloomConeEnable);
        Control.AddOptionPercentSlider(ScpCCVars.LightBloomConeOpacity, LightBloomConeOpacity);
        Control.AddOptionCheckBox(ScpCCVars.LightBloomOptimizations, LightBloomOptimizations);
        Control.AddOptionPercentSlider(ScpCCVars.LightBloomStrength, LightBloomStrength);

        // Режим совместимости
        Control.AddOptionCheckBox(ScpCCVars.CompatibilityModeShowWarning, CompatibilityModeShowWarning);
        Control.AddOptionCheckBox(ScpCCVars.CompatibilityModeUseShaders, CompatibilityModeUseShaders);

        /*
         * Аудио
         */

        // Эхо
        Control.AddOptionCheckBox(ScpCCVars.EchoEnabled, EchoEnabled);
        Control.AddOptionCheckBox(ScpCCVars.EchoStrongPresetPreferred, EchoStrongPresetPreferred);

        // Подавление звуков
        Control.AddOptionCheckBox(ScpCCVars.AudioMufflingEnabled, AudioMufflingEnabled);
        Control.AddOptionCheckBox(ScpCCVars.AudioMufflingHighFrequencyUpdate, AudioMufflingHighFrequencyUpdate);

        /*
         * Игра
         */

        // Автооткрытие меню персонажа
        Control.AddOptionCheckBox(ScpCCVars.AutoOpenCharacterMenuClientSideEnabled, AutoOpenCharacterWindowEnabled);

        Control.Initialize();

        HideSomeButtons();
    }

    private void CheckCompatibilityMode()
    {
        var isInCompatibilityMode = _configuration.GetCVar(CVars.DisplayCompat);

        CompatibilityModeShowWarning.Visible = isInCompatibilityMode;
        CompatibilityModeUseShaders.Visible = isInCompatibilityMode;
    }

    private void HideSomeButtons()
    {
        ToggleGrain();
        ToggleBloom();
        ToggleBloomCone();
        ToggleEcho();
        ToggleAudioMuffling();
    }

    protected override void EnteredTree()
    {
        base.EnteredTree();

        GrainToggleOverlayCheckBox.OnToggled += ToggleGrain;
        LightBloomEnable.OnToggled += ToggleBloom;
        LightBloomConeEnable.OnToggled += ToggleBloomCone;
        EchoEnabled.OnToggled += ToggleEcho;
        AudioMufflingEnabled.OnToggled += ToggleAudioMuffling;
    }

    protected override void ExitedTree()
    {
        base.ExitedTree();

        GrainToggleOverlayCheckBox.OnToggled -= ToggleGrain;
        LightBloomEnable.OnToggled -= ToggleBloom;
        LightBloomConeEnable.OnToggled -= ToggleBloomCone;
        EchoEnabled.OnToggled -= ToggleEcho;
        AudioMufflingEnabled.OnToggled -= ToggleAudioMuffling;
    }

    private void ToggleGrain(BaseButton.ButtonToggledEventArgs value = default!)
    {
        GrainStrengthSlider.Visible = GrainToggleOverlayCheckBox.Pressed;
    }

    private void ToggleBloom(BaseButton.ButtonToggledEventArgs value = default!)
    {
        var enabled = LightBloomEnable.Pressed;
        LightBloomConeEnable.Visible = enabled;
        LightBloomOptimizations.Visible = enabled;
        LightBloomStrength.Visible = enabled;

        ToggleBloomCone();
    }

    private void ToggleBloomCone(BaseButton.ButtonToggledEventArgs value = default!)
    {
        LightBloomConeOpacity.Visible = LightBloomConeEnable.Pressed && LightBloomEnable.Pressed;
    }

    private void ToggleEcho(BaseButton.ButtonToggledEventArgs value = default!)
    {
        EchoStrongPresetPreferred.Visible = EchoEnabled.Pressed;
    }

    private void ToggleAudioMuffling(BaseButton.ButtonToggledEventArgs value = default!)
    {
        AudioMufflingHighFrequencyUpdate.Visible = AudioMufflingEnabled.Pressed;
    }
}
