using System.Linq;
using Content.Client.Lobby;
using Content.Client.Roles;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Content.Shared.StationRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Enums;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client._Sunrise.StationRecords;

[GenerateTypedNameReferences]
public sealed partial class SunriseGeneralRecord : BoxContainer
{
    private readonly IEntityManager _entity;
    private readonly IPrototypeManager _prototype;
    private readonly ILocalizationManager _loc;
    private readonly JobSystem _job;
    private readonly LobbyUIController _controller;

    public Action<uint>? OnDeletePressed;
    public Action<GeneralStationRecord, uint>? OnSaveButtonPressed;

    private EntityUid _previewDummy;
    private readonly HumanoidCharacterProfile? _profile;

    private readonly List<SpeciesPrototype> _allSpecies;
    private readonly Gender[] _allGender;

    public SunriseGeneralRecord(GeneralStationRecord record,
        bool canDelete,
        uint? id,
        in IEntityManager entity,
        in IPrototypeManager prototype,
        in ILocalizationManager loc,
        in JobSystem job,
        in LobbyUIController controller)
    {
        RobustXamlLoader.Load(this);

        _entity = entity;
        _prototype = prototype;
        _loc = loc;
        _job = job;
        _controller = controller;

        _profile = record.HumanoidProfile;
        _allSpecies = _prototype.EnumeratePrototypes<SpeciesPrototype>().ToList();
        _allGender = Enum.GetValues<Gender>();

        if (canDelete && id != null )
        {
            DeleteButton.Visible = true;
            DeleteButton.OnPressed += _ => OnDeletePressed?.Invoke(id.Value);
        }

        if (id != null )
        {
            SaveButton.Visible = true;
            SaveButton.OnPressed += _ =>
            {
                var updatedRecord = BuildUpdatedRecord(record);
                OnSaveButtonPressed?.Invoke(updatedRecord, id.Value);
            };
        }

        UpdatePersonnelInfo(record);
        UpdateJobInfo(record);
        ReloadPreview(record.JobPrototype);
    }

    ~SunriseGeneralRecord()
    {
        _entity.DeleteEntity(_previewDummy);
    }

    private void UpdatePersonnelInfo(GeneralStationRecord record)
    {
        AgeLabel.Text = "Возраст: ";
        Age.Text = record.Age.ToString();

        SpeciesLabel.Text = "Раса: ";

        for (var i = 0; i < _allSpecies.Count; i++)
        {
            var item = _allSpecies[i];

            if (item.StationRecordsHidden && item.ID != record.Species)
                continue;

            var name = _loc.GetString(item.Name);
            Species.AddItem(name, i);

            if (item.ID == record.Species)
                Species.SelectId(i);
        }

        GenderLabel.Text = "Пол: ";

        for (var i = 0; i < _allGender.Length; i++)
        {
            var item = _allGender[i];
            var name = _loc.GetString("station-records-gender", ("gender", item));

            Gender.AddItem(name, i);

            if (item == record.Gender)
                Gender.SelectId(i);
        }

        FingerprintLabel.Text = "Отпечатки: ";
        Fingerprint.Text = record.Fingerprint ?? _loc.GetString("generic-not-available-shorthand");

        DnaLabel.Text = "ДНК: ";
        Dna.Text = record.DNA ?? _loc.GetString("generic-not-available-shorthand");
    }

    private void UpdateJobInfo(GeneralStationRecord record)
    {
        SubText.Visible = false;
        NameLabel.Text = record.Name;

        if (!_prototype.TryIndex<JobPrototype>(record.JobPrototype, out var job))
            return;

        SubText.Text = $"{job.LocalizedName}";
        SubText.Visible = true;

        if (!_job.TryGetDepartment(job.ID, out var department))
            return;

        SubText.Text = $"{_loc.GetString(department.Name)}, {job.LocalizedName}";
    }

    private void ReloadPreview(ProtoId<JobPrototype> jobProtoId)
    {
        if (!_prototype.TryIndex(jobProtoId, out var job))
            return;

        _entity.DeleteEntity(_previewDummy);
        _previewDummy = EntityUid.Invalid;

        if (job.JobEntity != null)
            _previewDummy = _entity.Spawn(job.JobEntity, MapCoordinates.Nullspace);

        if (_profile != null && _prototype.HasIndex(_profile.Species))
            _previewDummy = _controller.LoadProfileEntity(_profile, job, true);

        SpriteView.SetEntity(_previewDummy);
    }

    private GeneralStationRecord BuildUpdatedRecord(GeneralStationRecord original)
    {
        // Делаем копию, чтобы не трогать оригинал напрямую
        var updated = original with
        {
            Age = int.TryParse(Age.Text, out var ageVal) ? ageVal : original.Age,
            Species = _allSpecies[Species.SelectedId].ID,
            Gender = _allGender[Gender.SelectedId],
            Fingerprint = Fingerprint.Text,
            DNA = Dna.Text,
        };

        return updated;
    }
}
