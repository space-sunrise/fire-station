using System.Numerics;
using Content.Client.Lobby;
using Content.Client.Roles;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Content.Shared.StationRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client._Sunrise.StationRecords;

[GenerateTypedNameReferences]
public sealed partial class SunriseGeneralRecord : BoxContainer
{
    private readonly IEntityManager _entity;
    private readonly IPrototypeManager _prototype;
    private readonly JobSystem _job;
    private readonly LobbyUIController _controller;

    public Action<uint>? OnDeletePressed;

    private EntityUid _previewDummy;
    private readonly HumanoidCharacterProfile? _profile;

    public SunriseGeneralRecord(GeneralStationRecord record,
        bool canDelete,
        uint? id,
        in IEntityManager entity,
        in IPrototypeManager prototype,
        in JobSystem job,
        in LobbyUIController controller)
    {
        RobustXamlLoader.Load(this);

        _entity = entity;
        _prototype = prototype;
        _job = job;
        _controller = controller;

        _profile = record.HumanoidProfile;

        Age.Text = Loc.GetString("general-station-record-console-record-age", ("age", record.Age.ToString()));

        Species.Text = Loc.GetString("general-station-record-console-record-species", ("species", record.Species));

        Gender.Text = Loc.GetString("general-station-record-console-record-gender",
            ("gender", record.Gender.ToString()));

        Fingerprint.Text = Loc.GetString("general-station-record-console-record-fingerprint",
            ("fingerprint", record.Fingerprint ?? Loc.GetString("generic-not-available-shorthand")));

        Dna.Text = Loc.GetString("general-station-record-console-record-dna",
            ("dna", record.DNA ?? Loc.GetString("generic-not-available-shorthand")));

        if (canDelete && id != null )
        {
            DeleteButton.Visible = true;
            DeleteButton.OnPressed += _ => OnDeletePressed?.Invoke(id.Value);
        }

        UpdateJobInfo(record);
        ReloadPreview(record.JobPrototype);

        // ФАК Ю, РИЧ ТЕКСТ, КОТОРЫЙ НЕ ХОЧЕТ СТАНОВИТЬСЯ НОРМАЛЬНЫМ
        // ПОКА Я НЕ РЕСАЙЗНУ ОКНО :>
        SetSize = new Vector2(Size.X + 1, Size.Y + 1);
        SetSize = new Vector2(Size.X - 1, Size.Y - 1);
    }

    private void UpdateJobInfo(GeneralStationRecord record)
    {
        SubText.Visible = false;
        NameLabel.Text = record.Name;

        if (!_prototype.TryIndex<JobPrototype>(record.JobPrototype, out var job))
            return;

        SubText.Text = $"{job.LocalizedName}";
        SubText.Visible = true;

        if (!_job.TryGetDepartment(job.ID, out var department))
            return;

        SubText.Text = $"{Loc.GetString(department.Name)}, {job.LocalizedName}";
    }

    private void ReloadPreview(ProtoId<JobPrototype> jobProtoId)
    {
        if (!_prototype.TryIndex(jobProtoId, out var job))
            return;

        _entity.DeleteEntity(_previewDummy);
        _previewDummy = EntityUid.Invalid;

        if (job.JobEntity != null)
            _previewDummy = _entity.Spawn(job.JobEntity, MapCoordinates.Nullspace);

        if (_profile != null && _prototype.HasIndex(_profile.Species))
            _previewDummy = _controller.LoadProfileEntity(_profile, job, true);

        SpriteView.SetEntity(_previewDummy);
    }
}
