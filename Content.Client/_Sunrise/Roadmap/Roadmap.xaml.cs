using Content.Shared._Sunrise.Roadmap;
using Content.Shared._Sunrise.SunriseCCVars;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;

namespace Content.Client._Sunrise.Roadmap;

[GenerateTypedNameReferences]
public sealed partial class Roadmap : DefaultWindow
{
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly ILocalizationManager _loc = default!;

    public Roadmap()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        var roadmapId = _cfg.GetCVar(SunriseCCVars.RoadmapId);
        if (!_prototype.TryIndex<RoadmapVersionsPrototype>(roadmapId, out var roadmapVersions))
            return;

        PopulateRoadmap(roadmapVersions);
    }

    private void PopulateRoadmap(RoadmapVersionsPrototype roadmapVersions)
    {
        var headerLocale = Loc.GetString("ui-roadmap-header");
        var header = $"{headerLocale} {roadmapVersions.Fork}";
        Window.Title = header;

        MainBox.RemoveAllChildren();

        foreach (var data in roadmapVersions.Versions.Values)
        {
            var column = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                HorizontalExpand = true,
                VerticalExpand = true,
                Margin = new Thickness(0, 0, 10, 0),
            };

            var nameLabel = new Label
            {
                Text = _loc.GetString(data.Name),
                StyleClasses = { "LabelHeadingBigger" },
                HorizontalAlignment = HAlignment.Center,
                HorizontalExpand = true,
                FontColorOverride = Color.FromHex("#ffffff"),
                Margin = new Thickness(0, 0, 0, 10),
            };

            var targetColumn = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                Margin = new Thickness(0, 0, 10, 0),
            };

            column.AddChild(nameLabel);
            column.AddChild(targetColumn);

            foreach (var goal in data.Goals.Values)
            {
                var roadmapItem = new RoadmapItem
                {
                    HeaderText = _loc.GetString(goal.Name),
                    Text = _loc.GetString(goal.Desc),
                    ItemState = goal.State,
                };

                targetColumn.AddChild(roadmapItem);
            }

            var panel = new PanelContainer
            {
                MinWidth = 1,
                Margin = new Thickness(0, 0, 10, 0),
                VerticalExpand = true,
                PanelOverride = new StyleBoxFlat(backgroundColor: Color.FromHex("#2a292f")),
            };

            MainBox.AddChild(column);
            MainBox.AddChild(panel);
        }
    }
}
